{
	"info": {
		"_postman_id": "ff25de27-d88c-4458-9278-ea114a914b75",
		"name": "User",
		"description": "This Collection has all Folders (Endpoints), inside each folder, the endpoint is tested against both +ve and -ve Scenarios, Hope u find it useful",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "40750571"
	},
	"item": [
		{
			"name": "Create User",
			"item": [
				{
					"name": "1_Positive Return JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 99,\r\n  \"username\": \"Yazan\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user"
					},
					"response": []
				},
				{
					"name": "1_Positive Return XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is xml\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    // Check header explicitly says XML\r",
									"    pm.expect(contentType).to.include(\"application/xml\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user"
					},
					"response": []
				},
				{
					"name": "1_N: Missing ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ❗FIXME: This test is failing due to known API bug \r",
									"// (returns 200 even when ID doesn't exist)\r",
									"\r",
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  //\"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user"
					},
					"response": []
				},
				{
					"name": "1_N: Wrong ID Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: { type: \"number\" },\r",
									"        type: { type: \"string\" },\r",
									"        message: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    const Response_JSON = pm.response.json()\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema);\r",
									"    pm.expect(Response_JSON.message).to.eql(\"something bad happened\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"string\",\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user"
					},
					"response": []
				},
				{
					"name": "1_N: Wrong ID Properity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ❗FIXME: This test is failing due to known API bug \r",
									"// (returns 200 even when ID is wrong)\r",
									"\r",
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: { type: \"number\" },\r",
									"        type: { type: \"string\" },\r",
									"        message: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"IIDD\": 123,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user"
					},
					"response": []
				},
				{
					"name": "1_N: Wrong Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: { type: \"number\" },\r",
									"        type: { type: \"string\" },\r",
									"        message: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{URL}}/user"
					},
					"response": []
				},
				{
					"name": "1_N: Duplicated ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ❗FIXME: This test is failing due to known API bug \r",
									"// (returns 200 even when ID doesn't exist)\r",
									"\r",
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"// The following tests are valid and should remain as is\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: { type: \"number\" },\r",
									"        type: { type: \"string\" },\r",
									"        message: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get User By User Name",
			"item": [
				{
					"name": "2_Positive Return JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        id: { type: \"number\" },\r",
									"        username: { type: \"string\" },\r",
									"        firstName: { type: \"string\" },\r",
									"        lastName: { type: \"string\" },\r",
									"        email: { type: \"string\" },\r",
									"        password: { type: \"string\" },\r",
									"        phone: { type: \"string\" },\r",
									"        userStatus: { type: \"number\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}/user/string"
					},
					"response": []
				},
				{
					"name": "2_Positive Return XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is xml\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    // Check header explicitly says XML\r",
									"    pm.expect(contentType).to.include(\"application/xml\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": "{{URL}}/user/string"
					},
					"response": []
				},
				{
					"name": "2_N: Blank User Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(405);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{URL}}/user/"
					},
					"response": []
				},
				{
					"name": "2_N: NonExisting User Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{URL}}/user/ "
					},
					"response": []
				}
			]
		},
		{
			"name": "Log in",
			"item": [
				{
					"name": "3_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"string\",\r\n  \"password\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/login"
					},
					"response": []
				},
				{
					"name": "3_N: Log in with Already in Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"string\",\r\n  \"password\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/login"
					},
					"response": []
				},
				{
					"name": "3_N: Invalid User or Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"striasasdasdasng\",\r\n  \"password\": \"stringggasdasdaggg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/login"
					},
					"response": []
				},
				{
					"name": "3_N: Missing User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"stringggasdasdaggg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/login"
					},
					"response": []
				},
				{
					"name": "3_N: Missing Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"stringggasdasdaggg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/login"
					},
					"response": []
				},
				{
					"name": "3_N: Missing Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "Log out",
			"item": [
				{
					"name": "4_Positive Return JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/logout"
					},
					"response": []
				},
				{
					"name": "4_Positive Return XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is xml\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    // Check header explicitly says XML\r",
									"    pm.expect(contentType).to.include(\"application/xml\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/logout"
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Multiple Users",
			"item": [
				{
					"name": "5_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        },\r",
									"    required: [\"code\", \"type\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  },\r\n  {\r\n    \"id\": 1,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/createWithList"
					},
					"response": []
				},
				{
					"name": "5_N: Already Existing Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  },\r\n  {\r\n    \"id\": 1,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/createWithList"
					},
					"response": []
				},
				{
					"name": "5_N: Same ID for 2 Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  },\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/createWithList"
					},
					"response": []
				},
				{
					"name": "5_N: No IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  },\r\n  {\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/createWithList"
					},
					"response": []
				},
				{
					"name": "5_N: Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  },\r\n  {\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/createWithList"
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User",
			"item": [
				{
					"name": "6_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/string"
					},
					"response": []
				},
				{
					"name": "6_N: Update a Nonexisting User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.not.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/user/stringgggggggggg"
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "7_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"const Schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        code: {type: \"number\"},\r",
									"        type: {type: \"string\"},\r",
									"        message: {type: \"string\"}\r",
									"        }\r",
									"}\r",
									"pm.test(\"Identical Schema\", () => {\r",
									"    pm.expect(pm.response).to.have.jsonSchema(Schema)\r",
									"})\r",
									"\r",
									"pm.test(\"Response Content Type is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{URL}}/user/string"
					},
					"response": []
				},
				{
					"name": "7_N: Nonexisting User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Good Response Time\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{URL}}/user/stringgsdfsfsdf"
					},
					"response": []
				}
			]
		}
	]
}